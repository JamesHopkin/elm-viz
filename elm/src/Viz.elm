port module Viz exposing ( main )

import Browser
import Html exposing ( div, text )

import Json.Encode as Encode
import Json.Decode as Decode

import Graph
import Dict exposing ( Dict )


type alias RenderData =
  { id: Int
  , data: String -- outgoing dot or incoming svg
  }

renderDataDecoder : Decode.Decoder RenderData
renderDataDecoder = 
  Decode.map2 RenderData
    (Decode.field "id"  Decode.int)
    (Decode.field "data" Decode.string)

encodeRenderData : RenderData -> Encode.Value
encodeRenderData data = 
  Encode.object
    [ ("id", Encode.int data.id)
    , ("data", Encode.string data.data)
    ]

port renderDot : Encode.Value -> Cmd msg
port receiveGraph : (Decode.Value -> msg) -> Sub msg

type alias Model =
  { selected: List String
  , graph: Graph.Graph
  }

dnp = Graph.defaultNodeProperties
dep = Graph.defaultEdgeProperties

makeNodesDict : List ( String, Graph.NodeProperties ) -> Dict String Graph.Node
makeNodesDict nodes =
  let
    makeEntry ( id, props ) = ( id, Graph.Node id props )
  in
    Dict.fromList (List.map makeEntry nodes)

initialGraph =
  let
    initialNodes = makeNodesDict
      [ ( "from", { dnp | label = "generated by" } )
      , ( "Elm", dnp )
      ]

    makeEdge : String -> String -> Graph.EdgeProperties -> Maybe Graph.Edge
    makeEdge fromId toId props =
      let
        maybeFrom = Dict.get fromId initialNodes
        maybeTo = Dict.get toId initialNodes
      in
        case ( maybeFrom, maybeTo ) of
          ( Just from, Just to ) -> Just ( Graph.Edge from to props )
          _ -> Nothing

    initialEdges : List ( Maybe Graph.Edge )
    initialEdges =
      [ makeEdge "from" "Elm" dep
      ]
  in
    Graph.Graph
      (Dict.foldr ( \_ -> \node -> \result -> node :: result) [] initialNodes)
      (List.filterMap identity initialEdges)


  --dotGraph = """digraph G {
  --  node [shape=box];
  --  From [href="javascript:linkTest('woo!')"];

  --  From -> Elm [style=dashed, arrowhead=none];
  --  From -> another;
  --}
  --"""

update : Msg -> Model -> ( Model, Cmd Msg )
update msg model = ( model, Cmd.none )

type alias Flags = Int --Decode.Value

render : Graph.Graph -> Cmd Msg
render graph = renderDot (encodeRenderData { id = 0, data = Graph.toDot graph })

init : Flags -> ( Model, Cmd Msg )
init _ =
  ( { selected = []
    , graph = initialGraph
    }
  , render initialGraph
  )

type Msg
  = SomeData Encode.Value


view : Model -> Html.Html Msg
view model =
  div [] [ text "hello, elm made me!" ]

main : Program Flags Model Msg
main =
  Browser.element
    { init = init
    , view = view
    , update = update
    , subscriptions = \model -> receiveGraph SomeData
    }
