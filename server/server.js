"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.runVizServer = exports.Server = void 0;
const fs = require("fs");
const http = require("http");
const url_1 = require("url");
const MIME_TYPES = new Map([
    ['js', 'application/javascript'],
    ['json', 'application/json'],
    ['css', 'text/css'],
    ['text', 'text/plain'],
    ['txt', 'text/plain'],
    ['html', 'text/html'],
    ['png', 'image/png'],
    ['jpg', 'image/jpeg'],
    ['gif', 'image/gif'],
    ['wasm', 'application/wasm'],
]);
function makeHeadersObject(kvs) {
    const headers = {};
    for (const [k, v] of kvs) {
        headers[k] = v;
    }
    return headers;
}
function ensureRegExp(route) {
    if (route instanceof RegExp) {
        return route;
    }
    // allow any character it wildcards at the moment
    // should maybe require ** to match /
    route = route
        .replace(/([().+?])/g, '\\$1')
        .replace(/\*/g, '([^/]*)');
    return new RegExp(`^${route}$`);
}
function writeError(response, code, message) {
    response.writeHead(code, { 'Content-Type': 'text/plain' });
    response.end(message);
}
class Server {
    constructor() {
        this.server = null;
        this.handlers = [];
    }
    open(optPort) {
        if (this.server) {
            throw new Error('already open');
        }
        const port = optPort || 80;
        this.server = new http.Server;
        this.server.on('request', (request, response) => this.onRequest(request, response));
        console.log(`Web server listening on port ${port}`);
        return new Promise((done, _fail) => this.server.listen(port, done));
    }
    close() {
        return new Promise((done, _fail) => this.server.close(done))
            .then(() => this.server = null);
    }
    addFileMapping(route, filePattern, opts) {
        let filetype = opts && opts.filetype;
        if (!filetype) {
            if (!(route instanceof RegExp)) {
                const lastDotIndex = route.lastIndexOf('.');
                if (lastDotIndex !== -1) {
                    filetype = route.substr(lastDotIndex + 1);
                }
            }
        }
        if (!filetype) {
            const lastDotIndex = filePattern.lastIndexOf('.');
            if (lastDotIndex === -1) {
                throw new Error('File type or file extension required');
            }
            filetype = filePattern.substr(lastDotIndex + 1);
        }
        if (!MIME_TYPES.has(filetype) && filetype.split('/').length !== 2) {
            throw new Error(`Unknown file type '${filetype}'`);
        }
        let encoding = null;
        let mimeType = MIME_TYPES.get(filetype);
        if (mimeType) {
            // assuming known file types other than images are text
            // HACK HACK HACK - any headers currently turn off utf8 decoding
            if (!mimeType.startsWith('image/') && !(opts && 'headers' in opts)) {
                encoding = 'utf8';
            }
        }
        else {
            mimeType = filetype;
        }
        const routeRegExp = ensureRegExp(route);
        this.handlers.push({
            route: routeRegExp,
            verb: 'GET',
            handler: (response, req, _match) => this.handleFileRequest(response, filePattern, encoding, mimeType, routeRegExp, req.url.pathname, opts && opts.headers)
        });
    }
    handleFileRequest(response, filePattern, encoding, mimeType, route, path, inHeaders) {
        const filePath = path.replace(route, filePattern);
        if (filePath.search(/\.\./) !== -1) {
            throw new Error('relative paths not allowed!');
        }
        // serve the file
        fs.readFile(filePath, encoding, (err, data) => {
            if (err) {
                writeError(response, 404, `File not found: ${filePath}`);
            }
            else {
                const headers = inHeaders ? makeHeadersObject(inHeaders) : {};
                headers['Content-Type'] = mimeType;
                response.writeHead(200, headers);
                response.end(data);
            }
        });
    }
    async onRequest(req, response) {
        let url = null;
        try {
            url = new url_1.URL(`http://${req.headers.host}${req.url}`);
        }
        catch (err) {
            console.log('Request error: ' + err);
        }
        if (!url || !url.pathname) {
            writeError(response, 500, 'URL parse failure');
            return;
        }
        //todo POST/PUT
        for (const handler of this.handlers) {
            if (req.method !== handler.verb) {
                continue;
            }
            const match = url.pathname.match(handler.route);
            if (match) {
                try {
                    await handler.handler(response, { url: url, cookies: req.headers.cookie }, match);
                }
                catch (err) {
                    writeError(response, 500, 'Internal server error: ' + err);
                }
                return;
            }
        }
        writeError(response, 404, 'Resource not found: ' + url);
    }
}
exports.Server = Server;
function runVizServer(port) {
    const s = new Server;
    s.addFileMapping('/js/*.js', 'js/$1.js');
    s.addFileMapping('/css/*.css', 'css/$1.css');
    s.addFileMapping('/images/*.png', 'images/$1.png');
    s.addFileMapping('/', 'index.html', { filetype: "text/html" });
    s.addFileMapping('/*.html', '$1.html', { filetype: "text/html" });
    s.addFileMapping('/*.wasm', '$1.wasm.gz', { filetype: "application/wasm", headers: [
            ['Cache-Control', 'max-age=' + 60 * 24 * 7],
            ['Content-Encoding', 'gzip']
        ] });
    s.addFileMapping('/*', '$1', { filetype: "text/plain" });
    s.open(port);
    return s;
}
exports.runVizServer = runVizServer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL25ldy9zZXJ2ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEseUJBQXlCO0FBQ3pCLDZCQUE2QjtBQUM3Qiw2QkFBMEI7QUFFMUIsTUFBTSxVQUFVLEdBQUcsSUFBSSxHQUFHLENBQUM7SUFDMUIsQ0FBQyxJQUFJLEVBQUUsd0JBQXdCLENBQUM7SUFDaEMsQ0FBQyxNQUFNLEVBQUUsa0JBQWtCLENBQUM7SUFDNUIsQ0FBQyxLQUFLLEVBQUUsVUFBVSxDQUFDO0lBQ25CLENBQUMsTUFBTSxFQUFFLFlBQVksQ0FBQztJQUN0QixDQUFDLEtBQUssRUFBRSxZQUFZLENBQUM7SUFDckIsQ0FBQyxNQUFNLEVBQUUsV0FBVyxDQUFDO0lBQ3JCLENBQUMsS0FBSyxFQUFFLFdBQVcsQ0FBQztJQUNwQixDQUFDLEtBQUssRUFBRSxZQUFZLENBQUM7SUFDckIsQ0FBQyxLQUFLLEVBQUUsV0FBVyxDQUFDO0lBQ3BCLENBQUMsTUFBTSxFQUFFLGtCQUFrQixDQUFDO0NBQzVCLENBQUMsQ0FBQTtBQUVGLFNBQVMsaUJBQWlCLENBQUMsR0FBdUI7SUFDakQsTUFBTSxPQUFPLEdBQVEsRUFBRSxDQUFDO0lBQ3hCLEtBQUssTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxHQUFHLEVBQUU7UUFDekIsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztLQUNmO0lBQ0QsT0FBTyxPQUFPLENBQUM7QUFDaEIsQ0FBQztBQUVELFNBQVMsWUFBWSxDQUFDLEtBQXNCO0lBQzNDLElBQUksS0FBSyxZQUFZLE1BQU0sRUFBRTtRQUM1QixPQUFPLEtBQUssQ0FBQTtLQUNaO0lBRUQsaURBQWlEO0lBQ2pELHFDQUFxQztJQUNyQyxLQUFLLEdBQUcsS0FBSztTQUNWLE9BQU8sQ0FBQyxZQUFZLEVBQUUsTUFBTSxDQUFDO1NBQzdCLE9BQU8sQ0FBQyxLQUFLLEVBQUUs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QVEsRUFBRSxrQkFBa0IsRUFBRSxPQUFPLEVBQUU7WUFDakYsQ0FBQyxlQUFlLEVBQUUsVUFBVSxHQUFHLEVBQUUsR0FBQyxFQUFFLEdBQUMsQ0FBQyxDQUFDO1lBQ3ZDLENBQUMsa0JBQWtCLEVBQUUsTUFBTSxDQUFDO1NBQzVCLEVBQUMsQ0FBQyxDQUFBO0lBQ0gsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLEVBQUMsUUFBUSxFQUFFLFlBQVksRUFBQyxDQUFDLENBQUE7SUFFdEQsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUNaLE9BQU8sQ0FBQyxDQUFBO0FBQ1QsQ0FBQztBQWhCRCxvQ0FnQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7XG5pbXBvcnQgKiBhcyBodHRwIGZyb20gJ2h0dHAnO1xuaW1wb3J0IHsgVVJMIH0gZnJvbSAndXJsJztcblxuY29uc3QgTUlNRV9UWVBFUyA9IG5ldyBNYXAoW1xuXHRbJ2pzJywgJ2FwcGxpY2F0aW9uL2phdmFzY3JpcHQnXSxcblx0Wydqc29uJywgJ2FwcGxpY2F0aW9uL2pzb24nXSxcblx0Wydjc3MnLCAndGV4dC9jc3MnXSxcblx0Wyd0ZXh0JywgJ3RleHQvcGxhaW4nXSxcblx0Wyd0eHQnLCAndGV4dC9wbGFpbiddLFxuXHRbJ2h0bWwnLCAndGV4dC9odG1sJ10sXG5cdFsncG5nJywgJ2ltYWdlL3BuZyddLFxuXHRbJ2pwZycsICdpbWFnZS9qcGVnJ10sXG5cdFsnZ2lmJywgJ2ltYWdlL2dpZiddLFxuXHRbJ3dhc20nLCAnYXBwbGljYXRpb24vd2FzbSddLFxuXSlcblxuZnVuY3Rpb24gbWFrZUhlYWRlcnNPYmplY3Qoa3ZzOiBbc3RyaW5nLCBzdHJpbmddW10pIHtcblx0Y29uc3QgaGVhZGVyczogYW55ID0ge307XG5cdGZvciAoY29uc3QgW2ssIHZdIG9mIGt2cykge1xuXHRcdGhlYWRlcnNba10gPSB2O1xuXHR9XG5cdHJldHVybiBoZWFkZXJzO1x0XG59XG5cbmZ1bmN0aW9uIGVuc3VyZVJlZ0V4cChyb3V0ZTogUmVnRXhwIHwgc3RyaW5nKSB7XG5cdGlmIChyb3V0ZSBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuXHRcdHJldHVybiByb3V0ZVxuXHR9XG5cblx0Ly8gYWxsb3cgYW55IGNoYXJhY3RlciBpdCB3aWxkY2FyZHMgYXQgdGhlIG1vbWVudFxuXHQvLyBzaG91bGQgbWF5YmUgcmVxdWlyZSAqKiB0byBtYXRjaCAvXG5cdHJvdXRlID0gcm91dGVcblx0XHRcdC5yZXBsYWNlKC8oWygpLis/XSkvZywgJ1xcXFwkMScpXG5cdFx0XHQucmVwbGFjZSgvXFwqL2csICcoW14vXSopJylcblxuXHRyZXR1cm4gbmV3IFJlZ0V4cChgXiR7cm91dGV9JGApXG59XG5cbmZ1bmN0aW9uIHdyaXRlRXJyb3IocmVzcG9uc2U6IGh0dHAuU2VydmVyUmVzcG9uc2UsIGNvZGU6IG51bWJlciwgbWVzc2FnZTogc3RyaW5nKSB7XG5cdHJlc3BvbnNlLndyaXRlSGVhZChjb2RlLCB7J0NvbnRlbnQtVHlwZSc6ICd0ZXh0L3BsYWluJ30pXG5cdHJlc3BvbnNlLmVuZChtZXNzYWdlKVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFdlYlJlcXVlc3Qge1xuXHR1cmw6IFVSTCxcblx0Y29va2llczogc3RyaW5nXG5cdHJlcURhdGE/OiBzdHJpbmdcbn1cblxuZXhwb3J0IGludGVyZmFjZSBSZXF1ZXN0T3B0cyB7XG5cdGZpbGV0eXBlPzogc3RyaW5nXG5cdGhlYWRlcnM/OiBbc3RyaW5nLCBzdHJpbmddW11cbn1cblxudHlwZSBIYW5kbGVyRnVuYyA9IChyZXM6IGh0dHAuU2VydmVyUmVzcG9uc2UsIHJlcTogV2ViUmVxdWVzdCwgbWF0Y2g6IHN0cmluZ1tdKSA9PiBhbnlcblxuaW50ZXJmYWNlIEhhbmRsZXJJbnRlcm5hbFxue1xuXHRyb3V0ZTogUmVnRXhwXG5cdHZlcmI6IHN0cmluZ1xuXHRoYW5kbGVyOiBIYW5kbGVyRnVuY1xufVxuXG5leHBvcnQgY2xhc3MgU2VydmVyIHtcblx0b3BlbihvcHRQb3J0PzogbnVtYmVyKSB7XG5cdFx0aWYgKHRoaXMuc2VydmVyKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ2FscmVhZHkgb3BlbicpXG5cdFx0fVxuXG5cdFx0Y29uc3QgcG9ydCA9IG9wdFBvcnQgfHwgODBcblxuXHRcdHRoaXMuc2VydmVyID0gbmV3IGh0dHAuU2VydmVyXG5cdFx0dGhpcy5zZXJ2ZXIub24oJ3JlcXVlc3QnLCAocmVxdWVzdCwgcmVzcG9uc2UpID0+IHRoaXMub25SZXF1ZXN0KHJlcXVlc3QsIHJlc3BvbnNlKSlcblxuXHRcdGNvbnNvbGUubG9nKGBXZWIgc2VydmVyIGxpc3RlbmluZyBvbiBwb3J0ICR7cG9ydH1gKVxuXG5cdFx0cmV0dXJuIG5ldyBQcm9taXNlPHZvaWQ+KChkb25lLCBfZmFpbCkgPT4gdGhpcy5zZXJ2ZXIhLmxpc3Rlbihwb3J0LCBkb25lKSlcblx0fVxuXG5cdGNsb3NlKCkge1xuXHRcdHJldHVybiBuZXcgUHJvbWlzZSgoZG9uZTogKCkgPT4gdm9pZCwgX2ZhaWwpID0+IHRoaXMuc2VydmVyIS5jbG9zZShkb25lKSlcblx0XHQudGhlbigoKSA9PiB0aGlzLnNlcnZlciA9IG51bGwpXG5cdH1cblxuXHRhZGRGaWxlTWFwcGluZyhyb3V0ZTogc3RyaW5nIHwgUmVnRXhwLCBmaWxlUGF0dGVybjogc3RyaW5nLCBvcHRzPzogUmVxdWVzdE9wdHMpIHtcblx0XHRsZXQgZmlsZXR5cGUgPSBvcHRzICYmIG9wdHMuZmlsZXR5cGU7XG5cdFx0aWYgKCFmaWxldHlwZSkge1xuXHRcdFx0aWYgKCEocm91dGUgaW5zdGFuY2VvZiBSZWdFeHApKSB7XG5cdFx0XHRcdGNvbnN0IGxhc3REb3RJbmRleCA9IHJvdXRlLmxhc3RJbmRleE9mKCcuJylcblx0XHRcdFx0aWYgKGxhc3REb3RJbmRleCAhPT0gLTEpIHtcblx0XHRcdFx0XHRmaWxldHlwZSA9IHJvdXRlLnN1YnN0cihsYXN0RG90SW5kZXggKyAxKVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCFmaWxldHlwZSkge1xuXHRcdFx0Y29uc3QgbGFzdERvdEluZGV4ID0gZmlsZVBhdHRlcm4ubGFzdEluZGV4T2YoJy4nKVxuXHRcdFx0aWYgKGxhc3REb3RJbmRleCA9PT0gLTEpIHtcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCdGaWxlIHR5cGUgb3IgZmlsZSBleHRlbnNpb24gcmVxdWlyZWQnKVxuXHRcdFx0fVxuXHRcdFx0ZmlsZXR5cGUgPSBmaWxlUGF0dGVybi5zdWJzdHIobGFzdERvdEluZGV4ICsgMSlcblx0XHR9XG5cdFx0aWYgKCFNSU1FX1RZUEVTLmhhcyhmaWxldHlwZSkgJiYgZmlsZXR5cGUuc3BsaXQoJy8nKS5sZW5ndGggIT09IDIpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihgVW5rbm93biBmaWxlIHR5cGUgJyR7ZmlsZXR5cGV9J2ApXG5cdFx0fVxuXG5cdFx0bGV0IGVuY29kaW5nOiBzdHJpbmcgfCBudWxsID0gbnVsbFxuXHRcdGxldCBtaW1lVHlwZSA9IE1JTUVfVFlQRVMuZ2V0KGZpbGV0eXBlKVxuXHRcdGlmIChtaW1lVHlwZSkge1xuXHRcdFx0Ly8gYXNzdW1pbmcga25vd24gZmlsZSB0eXBlcyBvdGhlciB0aGFuIGltYWdlcyBhcmUgdGV4dFxuXHRcdFx0Ly8gSEFDSyBIQUNLIEhBQ0sgLSBhbnkgaGVhZGVycyBjdXJyZW50bHkgdHVybiBvZmYgdXRmOCBkZWNvZGluZ1xuXHRcdFx0aWYgKCFtaW1lVHlwZS5zdGFydHNXaXRoKCdpbWFnZS8nKSAmJiAhKG9wdHMgJiYgJ2hlYWRlcnMnIGluIG9wdHMpKSB7XG5cdFx0XHRcdGVuY29kaW5nID0gJ3V0ZjgnXG5cdFx0XHR9XG5cdFx0fVxuXHRcdGVsc2Uge1xuXHRcdFx0bWltZVR5cGUgPSBmaWxldHlwZVxuXHRcdH1cblxuXHRcdGNvbnN0IHJvdXRlUmVnRXhwID0gZW5zdXJlUmVnRXhwKHJvdXRlKVxuXHRcdHRoaXMuaGFuZGxlcnMucHVzaCh7XG5cdFx0XHRyb3V0ZTogcm91dGVSZWdFeHAsXG5cdFx0XHR2ZXJiOiAnR0VUJyxcblx0XHRcdGhhbmRsZXI6IChyZXNwb25zZTogaHR0cC5TZXJ2ZXJSZXNwb25zZSwgcmVxOiBXZWJSZXF1ZXN0LCBfbWF0Y2g6IHN0cmluZ1tdKSA9PlxuXHRcdFx0XHR0aGlzLmhhbmRsZUZpbGVSZXF1ZXN0KHJlc3BvbnNlLCBmaWxlUGF0dGVybiwgZW5jb2RpbmcsIG1pbWVUeXBlISwgcm91dGVSZWdFeHAsIHJlcS51cmwucGF0aG5hbWUhLCBvcHRzICYmIG9wdHMuaGVhZGVycylcblx0XHR9KVxuXHR9XG5cblx0cHJpdmF0ZSBoYW5kbGVGaWxlUmVxdWVzdChyZXNwb25zZTogaHR0cC5TZXJ2ZXJSZXNwb25zZSwgZmlsZVBhdHRlcm46IHN0cmluZywgZW5jb2Rpbmc6IHN0cmluZyB8IG51bGwsXG5cdFx0XHRcdFx0XHRcdFx0bWltZVR5cGU6IHN0cmluZywgcm91dGU6IFJlZ0V4cCwgcGF0aDogc3RyaW5nLCBpbkhlYWRlcnM/OiBbc3RyaW5nLCBzdHJpbmddW10pIHtcblx0XHRjb25zdCBmaWxlUGF0aCA9IHBhdGgucmVwbGFjZShyb3V0ZSwgZmlsZVBhdHRlcm4pXG5cdFx0aWYgKGZpbGVQYXRoLnNlYXJjaCgvXFwuXFwuLykgIT09IC0xKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ3JlbGF0aXZlIHBhdGhzIG5vdCBhbGxvd2VkIScpXG5cdFx0fVxuXG5cdFx0Ly8gc2VydmUgdGhlIGZpbGVcblx0XHRmcy5yZWFkRmlsZShmaWxlUGF0aCwgZW5jb2RpbmcsIChlcnIsIGRhdGEpID0+IHtcblx0XHRcdGlmIChlcnIpIHtcblx0XHRcdFx0d3JpdGVFcnJvcihyZXNwb25zZSwgNDA0LCBgRmlsZSBub3QgZm91bmQ6ICR7ZmlsZVBhdGh9YClcblx0XHRcdH1cblx0XHRcdGVsc2Uge1xuXHRcdFx0XHRjb25zdCBoZWFkZXJzID0gaW5IZWFkZXJzID8gbWFrZUhlYWRlcnNPYmplY3QoaW5IZWFkZXJzKSA6IHt9XG5cdFx0XHRcdGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID0gbWltZVR5cGVcblx0XHRcdFx0cmVzcG9uc2Uud3JpdGVIZWFkKDIwMCwgaGVhZGVycylcblx0XHRcdFx0cmVzcG9uc2UuZW5kKGRhdGEpXG5cdFx0XHR9XG5cdFx0fSlcblx0fVxuXG5cdHByaXZhdGUgYXN5bmMgb25SZXF1ZXN0KHJlcTogaHR0cC5JbmNvbWluZ01lc3NhZ2UsIHJlc3BvbnNlOiBodHRwLlNlcnZlclJlc3BvbnNlKSB7XG5cdFx0bGV0IHVybCA9IG51bGxcblx0XHR0cnkge1xuXHRcdFx0dXJsID0gbmV3IFVSTChgaHR0cDovLyR7cmVxLmhlYWRlcnMuaG9zdH0ke3JlcS51cmwhfWApXG5cdFx0fVxuXHRcdGNhdGNoIChlcnIpIHtcblx0XHRcdGNvbnNvbGUubG9nKCdSZXF1ZXN0IGVycm9yOiAnICsgZXJyLCApXG5cdFx0fVxuXG5cdFx0aWYgKCF1cmwgfHwgIXVybC5wYXRobmFtZSkge1xuXHRcdFx0d3JpdGVFcnJvcihyZXNwb25zZSwgNTAwLCAnVVJMIHBhcnNlIGZhaWx1cmUnKVxuXHRcdFx0cmV0dXJuXG5cdFx0fVxuXG5cdFx0Ly90b2RvIFBPU1QvUFVUXG5cblx0XHRmb3IgKGNvbnN0IGhhbmRsZXIgb2YgdGhpcy5oYW5kbGVycykge1xuXHRcdFx0aWYgKHJlcS5tZXRob2QgIT09IGhhbmRsZXIudmVyYikge1xuXHRcdFx0XHRjb250aW51ZVxuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBtYXRjaCA9IHVybC5wYXRobmFtZS5tYXRjaChoYW5kbGVyLnJvdXRlKVxuXHRcdFx0aWYgKG1hdGNoKSB7XG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0YXdhaXQgaGFuZGxlci5oYW5kbGVyKHJlc3BvbnNlLCB7dXJsOiB1cmwsIGNvb2tpZXM6IHJlcS5oZWFkZXJzLmNvb2tpZSBhcyBzdHJpbmd9LCBtYXRjaClcblx0XHRcdFx0fVxuXHRcdFx0XHRjYXRjaCAoZXJyKSB7XG5cdFx0XHRcdFx0d3JpdGVFcnJvcihyZXNwb25zZSwgNTAwLCAnSW50ZXJuYWwgc2VydmVyIGVycm9yOiAnICsgZXJyKVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVyblxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHdyaXRlRXJyb3IocmVzcG9uc2UsIDQwNCwgJ1Jlc291cmNlIG5vdCBmb3VuZDogJyArIHVybClcblx0fVxuXG5cdHByaXZhdGUgc2VydmVyOiBodHRwLlNlcnZlciB8IG51bGwgPSBudWxsXG5cdHByaXZhdGUgaGFuZGxlcnM6IEhhbmRsZXJJbnRlcm5hbFtdID0gW11cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJ1blZpelNlcnZlcihwb3J0OiBudW1iZXIpIHtcblx0Y29uc3QgcyA9IG5ldyBTZXJ2ZXJcblxuXHRzLmFkZEZpbGVNYXBwaW5nKCcvanMvKi5qcycsICdqcy8kMS5qcycpXG5cdHMuYWRkRmlsZU1hcHBpbmcoJy9jc3MvKi5jc3MnLCAnY3NzLyQxLmNzcycpXG5cdHMuYWRkRmlsZU1hcHBpbmcoJy9pbWFnZXMvKi5wbmcnLCAnaW1hZ2VzLyQxLnBuZycpXG5cdHMuYWRkRmlsZU1hcHBpbmcoJy8nLCAnaW5kZXguaHRtbCcsIHtmaWxldHlwZTogXCJ0ZXh0L2h0bWxcIn0pXG5cdHMuYWRkRmlsZU1hcHBpbmcoJy8qLmh0bWwnLCAnJDEuaHRtbCcsIHtmaWxldHlwZTogXCJ0ZXh0L2h0bWxcIn0pXG5cdHMuYWRkRmlsZU1hcHBpbmcoJy8qLndhc20nLCAnJDEud2FzbS5neicsIHtmaWxldHlwZTogXCJhcHBsaWNhdGlvbi93YXNtXCIsIGhlYWRlcnM6IFtcblx0XHRbJ0NhY2hlLUNvbnRyb2wnLCAnbWF4LWFnZT0nICsgNjAqMjQqN10sXG5cdFx0WydDb250ZW50LUVuY29kaW5nJywgJ2d6aXAnXVxuXHRdfSlcblx0cy5hZGRGaWxlTWFwcGluZygnLyonLCAnJDEnLCB7ZmlsZXR5cGU6IFwidGV4dC9wbGFpblwifSlcblxuXHRzLm9wZW4ocG9ydClcblx0cmV0dXJuIHNcbn1cbiJdfQ==