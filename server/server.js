"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.runVizServer = exports.Server = void 0;
const fs = require("fs");
const http = require("http");
const MIME_TYPES = new Map([
    ['js', 'application/javascript'],
    ['json', 'application/json'],
    ['css', 'text/css'],
    ['text', 'text/plain'],
    ['txt', 'text/plain'],
    ['html', 'text/html'],
    ['png', 'image/png'],
    ['jpg', 'image/jpeg'],
    ['gif', 'image/gif'],
    ['wasm', 'application/wasm'],
]);
function makeHeadersObject(kvs) {
    const headers = {};
    for (const [k, v] of kvs) {
        headers[k] = v;
    }
    return headers;
}
function ensureRegExp(route) {
    if (route instanceof RegExp) {
        return route;
    }
    // allow any character it wildcards at the moment
    // should maybe require ** to match /
    route = route
        .replace(/([().+?])/g, '\\$1')
        .replace(/\*/g, '([^/]*)');
    return new RegExp(`^${route}$`);
}
function writeError(response, code, message) {
    response.writeHead(code, { 'Content-Type': 'text/plain' });
    response.end(message);
}
class Server {
    constructor() {
        this.server = null;
        this.handlers = [];
    }
    open(optPort) {
        if (this.server) {
            throw new Error('already open');
        }
        const port = optPort || 80;
        this.server = new http.Server;
        this.server.on('request', (request, response) => this.onRequest(request, response));
        console.log(`Web server listening on port ${port}`);
        return new Promise((done, _fail) => this.server.listen(port, done));
    }
    close() {
        return new Promise((done, _fail) => this.server.close(done))
            .then(() => this.server = null);
    }
    addFileMapping(route, filePattern, opts) {
        let filetype = opts && opts.filetype;
        if (!filetype) {
            if (!(route instanceof RegExp)) {
                const lastDotIndex = route.lastIndexOf('.');
                if (lastDotIndex !== -1) {
                    filetype = route.substr(lastDotIndex + 1);
                }
            }
        }
        if (!filetype) {
            const lastDotIndex = filePattern.lastIndexOf('.');
            if (lastDotIndex === -1) {
                throw new Error('File type or file extension required');
            }
            filetype = filePattern.substr(lastDotIndex + 1);
        }
        if (!MIME_TYPES.has(filetype) && filetype.split('/').length !== 2) {
            throw new Error(`Unknown file type '${filetype}'`);
        }
        let encoding = null;
        let mimeType = MIME_TYPES.get(filetype);
        if (mimeType) {
            // assuming known file types other than images are text
            // HACK HACK HACK - any headers currently turn off utf8 decoding
            if (!mimeType.startsWith('image/') && !(opts && 'headers' in opts)) {
                encoding = 'utf8';
            }
        }
        else {
            mimeType = filetype;
        }
        const routeRegExp = ensureRegExp(route);
        this.handlers.push({
            route: routeRegExp,
            verb: 'GET',
            handler: (response, req, _match) => this.handleFileRequest(response, filePattern, encoding, mimeType, routeRegExp, req.url.pathname, opts && opts.headers)
        });
    }
    handleFileRequest(response, filePattern, encoding, mimeType, route, path, inHeaders) {
        const filePath = path.replace(route, filePattern);
        if (filePath.search(/\.\./) !== -1) {
            throw new Error('relative paths not allowed!');
        }
        // serve the file
        fs.readFile(filePath, encoding, (err, data) => {
            if (err) {
                writeError(response, 404, `File not found: ${filePath}`);
            }
            else {
                const headers = inHeaders ? makeHeadersObject(inHeaders) : {};
                headers['Content-Type'] = mimeType;
                response.writeHead(200, headers);
                response.end(data);
            }
        });
    }
    async onRequest(req, response) {
        let url = null;
        try {
            url = new URL(`http://${req.headers.host}${req.url}`);
        }
        catch (err) {
            console.log('Request error: ' + err);
        }
        if (!url || !url.pathname) {
            writeError(response, 500, 'URL parse failure');
            return;
        }
        //todo POST/PUT
        for (const handler of this.handlers) {
            if (req.method !== handler.verb) {
                continue;
            }
            const match = url.pathname.match(handler.route);
            if (match) {
                try {
                    await handler.handler(response, { url: url, cookies: req.headers.cookie }, match);
                }
                catch (err) {
                    writeError(response, 500, 'Internal server error: ' + err);
                }
                return;
            }
        }
        writeError(response, 404, 'Resource not found: ' + url);
    }
}
exports.Server = Server;
function runVizServer(port) {
    const s = new Server;
    s.addFileMapping('/*.js', 'js/$1.js');
    s.addFileMapping('/', 'index.html', { filetype: "text/html" });
    s.addFileMapping('/*.html', '$1.html', { filetype: "text/html" });
    s.addFileMapping('/*.wasm', '$1.wasm.gz', { filetype: "application/wasm", headers: [
            ['Cache-Control', 'max-age=' + 60 * 24 * 7],
            ['Content-Encoding', 'gzip']
        ] });
    s.addFileMapping('/*', '$1', { filetype: "text/plain" });
    s.open(port);
    return s;
}
exports.runVizServer = runVizServer;
//# sourceMappingURL=data:application/json;base64,